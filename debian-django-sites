#! /bin/sh

### BEGIN INIT INFO
# Provides:          skeleton
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Example initscript
# Description:       This file should be used to construct scripts to be
#                    placed in /etc/init.d.
### END INIT INFO

# Author: SCys <me@iscys.com>

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="Description of the service"
NAME=debian-django-sites
DAEMON=/usr/sbin/$NAME
DAEMON_ARGS="--options args"
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME

### a config in /home/test/conf/django.conf:
# site_user=test
# site_group=nginx
# site_path=/home/test/web/itest

# site_sock=/home/test/web/itest/itest.sock
# site_pid=/home/test/web/itest/itest.pid

# site_python_path=/home/text/lib/python
# site_ext="maxspre=2 minspare=1 maxchildren=1 maxrequests=500"

SITE_CONF_PATH="/home/logan/sites/scripts"
DEFAULT_SITE_USER="www-data"
DEFAULT_SITE_GROUP="www-data"

# start single site
site_start() {
  if [ $# -lt 1 ]; then
    echo "usage: django-sites site_start /your/site/setting.conf"

    return 1
  fi

  . $1

  # touch pid
  [ -f $site_pid ] && ewarn "config $1 already running ($site_pid)" && continue

  start-stop-daemon --start \
    --user ${site_user:=$DEFAULT_SITE_USER} --group ${site_group:=$DEFAULT_SITE_GROUP} \
    --exec /usr/bin/env -- \
    PYTHONPATH="$site_python_path" python $site_path/manage.py runfcgi daemonize=true pidfile=$site_pid socket=$site_sock $site_ext
  chmod a+rwx $site_sock

  log_daemon_msg "config: $1 started"

  return 0
}

site_stop() {
  if [ $# -lt 1 ]; then
    echo "usage: django-sites site_stop /your/site/config/path/to/setting.conf"

    return 1
  fi

  . $1

  start-stop-daemon --stop --pidfile $site_pid
  log_daemon_msg "config: $1 stop"

  [ -f $site_pid ] && rm $site_pid
  [ -e $site_sock ] && rm $site_sock

  return 0
}

site_restart() {
  site_stop $@ \
  && site_start $@
}

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started

  for folder in $SITE_CONF_PATH; do
    log_daemon_msg "search config in $folder"
    [ -d $folder ] || continue
    
    for conf in `find $folder -iname "*.conf" -type f`; do
      site_start $conf
    done
  done

  return 0;
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --name $NAME
	RETVAL="$?"
	[ "$RETVAL" = 2 ] && return 2
  
  log_daemon_msg "Stop Django Sites"

  for folder in $SITE_CONF_PATH; do
    [ -d $folder ] || continue
    log_daemon_msg "search config in $folder"

    for conf in `find $folder -iname "*.conf" -type f`; do
      site_stop $conf
    done
  done

	[ "$?" = 2 ] && return 2
	# Many daemons don't delete their pidfiles when they exit.
	rm -f $PIDFILE
	return "$RETVAL"
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
	#
	# If the daemon can reload its configuration without
	# restarting (for example, when it is sent a SIGHUP),
	# then implement that here.
	#
	start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $NAME
	return 0
}

case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  status)
	status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
	;;
  #reload|force-reload)
	#
	# If do_reload() is not implemented then leave this commented out
	# and leave 'force-reload' as an alias for 'restart'.
	#
	#log_daemon_msg "Reloading $DESC" "$NAME"
	#do_reload
	#log_end_msg $?
	#;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
		# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	#echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac

:
